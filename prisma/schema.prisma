// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Enumeraciones
enum StockMovementType {
  ENTRY
  EXIT
  TRANSFER_IN
  TRANSFER_OUT
  ADJUSTMENT
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum DeliveryCondition {
  REUSABLE
  DISCARDED
}

enum ApprovalResult {
  APPROVED
  REJECTED
}

/// Usuarios (de Clerk)
model User {
  id             Int                @id @default(autoincrement())
  clerkId        String             @unique
  email          String             @unique
  name           String?
  imageUrl       String?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  stockMovements StockMovement[]
  deliveryBatches DeliveryBatch[]
  returnBatches  ReturnBatch[]
  requests       Request[]
  approvals      Approval[]
}

/// Artículos de protección personal
model EPP {
  id           Int              @id @default(autoincrement())
  code         String           @unique @db.VarChar(32)
  name         String           @db.VarChar(128)
  category     String           @db.VarChar(64)
  description  String?
  imageUrl     String?
  datasheetUrl String?
  minStock     Int              @default(1)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @default(now()) @updatedAt

  stocks       EPPStock[]
  movements    StockMovement[]
  deliveries   Delivery[]
  returnItems  ReturnItem[]
  requests     Request[]

  @@index([name])
  @@index([category])
}

/// Almacenes físicos
model Warehouse {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  location        String?
  createdAt       DateTime          @default(now())

  stocks          EPPStock[]
  movements       StockMovement[]
  deliveryBatches DeliveryBatch[]
  returnBatches   ReturnBatch[]

  @@index([name])
}

/// Inventario por almacén
model EPPStock {
  eppId       Int
  warehouseId Int
  quantity    Int               @default(0)

  epp         EPP               @relation(fields: [eppId], references: [id])
  warehouse   Warehouse         @relation(fields: [warehouseId], references: [id])

  @@id([eppId, warehouseId])
}

/// Movimientos de stock
model StockMovement {
  id          Int               @id @default(autoincrement())
  type        StockMovementType
  quantity    Int
  note        String?
  createdAt   DateTime          @default(now())

  eppId       Int
  epp         EPP               @relation(fields: [eppId], references: [id])

  warehouseId Int
  warehouse   Warehouse         @relation(fields: [warehouseId], references: [id])

  userId      Int
  user        User              @relation(fields: [userId], references: [id])

  @@index([eppId, warehouseId, createdAt])
}

/// Lote de entregas
model DeliveryBatch {
  id             Int           @id @default(autoincrement())
  code           String        @unique @db.VarChar(32)
  collaboratorId Int
  collaborator   Collaborator  @relation(fields: [collaboratorId], references: [id])
  note           String?
  warehouseId    Int
  warehouse      Warehouse     @relation(fields: [warehouseId], references: [id])
  userId         Int
  user           User          @relation(fields: [userId], references: [id])
  createdAt      DateTime      @default(now())

  deliveries     Delivery[]

  @@index([createdAt])
  @@index([collaboratorId])
}

/// Cada línea de entrega
model Delivery {
  id         Int           @id @default(autoincrement())
  batchId    Int
  batch      DeliveryBatch @relation(fields: [batchId], references: [id])
  eppId      Int
  epp        EPP           @relation(fields: [eppId], references: [id])
  quantity   Int
  createdAt  DateTime      @default(now())

  @@index([batchId, eppId])
}

/// Lote de devoluciones
model ReturnBatch {
  id           Int          @id @default(autoincrement())
  code         String       @unique @db.VarChar(32)
  warehouseId  Int
  warehouse    Warehouse    @relation(fields: [warehouseId], references: [id])
  userId       Int
  user         User         @relation(fields: [userId], references: [id])
  note         String?
  createdAt    DateTime     @default(now())

  items        ReturnItem[]

  @@index([createdAt])
}

/// Cada línea de devolución
model ReturnItem {
  id           Int               @id @default(autoincrement())
  batchId      Int
  batch        ReturnBatch       @relation(fields: [batchId], references: [id])
  eppId        Int
  epp          EPP               @relation(fields: [eppId], references: [id])
  quantity     Int
  condition    DeliveryCondition
  createdAt    DateTime          @default(now())

  @@index([batchId, eppId])
}

/// Solicitudes de EPP
model Request {
  id         Int           @id @default(autoincrement())
  employee   String
  quantity   Int
  reason     String?
  status     RequestStatus @default(PENDING)
  createdAt  DateTime      @default(now())

  eppId      Int
  epp        EPP           @relation(fields: [eppId], references: [id])
  userId     Int
  user       User          @relation(fields: [userId], references: [id])
  approvals  Approval[]
}

/// Aprobaciones
model Approval {
  id         Int             @id @default(autoincrement())
  result     ApprovalResult
  comment    String?
  createdAt  DateTime        @default(now())

  requestId  Int
  request    Request         @relation(fields: [requestId], references: [id])
  userId     Int
  user       User            @relation(fields: [userId], references: [id])
}

/// Colaboradores de entregas
model Collaborator {
  id               Int               @id @default(autoincrement())
  name             String            @db.VarChar(128)
  email            String?           @db.VarChar(128)
  position         String?           @db.VarChar(64)
  location         String?           @db.VarChar(128)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  deliveryBatches  DeliveryBatch[]

  @@index([name])

  
}

/// Configuración general del sistema (solo un registro – id = 1)
model SystemConfig {
  id          Int      @id @default(1)
  companyName String?  @db.VarChar(128)
  logoUrl     String?  @db.VarChar(255)   // Ruta relativa dentro de /public
  updatedAt   DateTime @updatedAt
}

