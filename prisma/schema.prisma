// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Enumeraciones
enum StockMovementType {
  ENTRY
  EXIT
  TRANSFER_IN
  TRANSFER_OUT
  ADJUSTMENT
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum DeliveryCondition {
  REUSABLE
  DISCARDED
}

enum ApprovalResult {
  APPROVED
  REJECTED
}

/// Modelo de usuarios
model User {
  id             Int                @id @default(autoincrement())
  clerkId        String             @unique
  email          String             @unique
  name           String?
  imageUrl       String?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  stockMovements StockMovement[]    
  deliveryBatches DeliveryBatch[]   
  returns        Return[]           
  requests       Request[]          
  approvals      Approval[]         
}

/// Artículos de protección personal
model EPP {
  id           Int              @id @default(autoincrement())
  code         String           @unique @db.VarChar(32)
  name         String           @db.VarChar(128)
  category     String           @db.VarChar(64)
  description  String?
  imageUrl     String?
  datasheetUrl String?
  minStock     Int              @default(1)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @default(now()) @updatedAt

  // Inventario por almacén
  stocks       EPPStock[]

  // Movimientos de stock
  movements    StockMovement[]

  // Entregas (renglones) y devoluciones
  deliveries   Delivery[]       
  returns      Return[]         
  requests     Request[]        

  @@index([name])
  @@index([category])
}

/// Almacenes físicos
model Warehouse {
  id             Int               @id @default(autoincrement())
  name           String            @unique
  location       String?
  createdAt      DateTime          @default(now())

  // Existencias en este almacén
  stocks         EPPStock[]

  // Todos los movimientos de stock en este almacén
  movements      StockMovement[]

  // Lotes de entrega que parten de este almacén
  deliveryBatches DeliveryBatch[]

  // Devoluciones que ingresan a este almacén
  returns        Return[]
}

/// Inventario de cada EPP en cada almacén
model EPPStock {
  eppId          Int
  warehouseId    Int
  quantity       Int               @default(0)

  epp            EPP               @relation(fields: [eppId], references: [id])
  warehouse      Warehouse         @relation(fields: [warehouseId], references: [id])

  @@id([eppId, warehouseId])
}

/// Movimientos de stock (entra/sale/transfiere/ajusta) en un solo almacén
model StockMovement {
  id             Int               @id @default(autoincrement())
  type           StockMovementType
  quantity       Int
  note           String?
  createdAt      DateTime          @default(now())

  eppId          Int
  epp            EPP               @relation(fields: [eppId], references: [id])

  warehouseId    Int
  warehouse      Warehouse         @relation(fields: [warehouseId], references: [id])

  userId         Int
  user           User              @relation(fields: [userId], references: [id])

  @@index([eppId, warehouseId, createdAt])
}

/// Lote de entregas múltiples desde un almacén
model DeliveryBatch {
  id              Int           @id @default(autoincrement())
  code            String        @unique @db.VarChar(32)

  collaboratorId  Int 
  collaborator    Collaborator @relation(fields: [collaboratorId], references: [id])

  note            String?                                        
  warehouseId     Int                                       
  warehouse       Warehouse   @relation(fields: [warehouseId], references: [id])

  userId          Int                                        
  user            User        @relation(fields: [userId], references: [id])

  createdAt       DateTime     @default(now())

  deliveries      Delivery[]
  returns         Return[]

  @@index([createdAt])
  @@index([collaboratorId])
}

/// Cada línea de entrega dentro de un batch
model Delivery {
  id             Int               @id @default(autoincrement())
  batchId        Int
  batch          DeliveryBatch     @relation(fields: [batchId], references: [id])

  eppId          Int
  epp            EPP               @relation(fields: [eppId], references: [id])

  quantity       Int
  createdAt      DateTime          @default(now())
}

/// Devoluciones (vuelven inventario a un almacén)
model Return {
  id             Int              @id @default(autoincrement())
  batchId        Int
  batch          DeliveryBatch   @relation(fields: [batchId], references: [id])
  employee       String
  quantity       Int
  condition      DeliveryCondition
  warehouseId    Int
  warehouse      Warehouse        @relation(fields: [warehouseId], references: [id])
  createdAt      DateTime         @default(now())

  eppId          Int
  epp            EPP              @relation(fields: [eppId], references: [id])
  userId         Int
  user           User             @relation(fields: [userId], references: [id])
}

/// Solicitudes de EPP
model Request {
  id             Int              @id @default(autoincrement())
  employee       String
  quantity       Int
  reason         String?
  status         RequestStatus    @default(PENDING)
  createdAt      DateTime         @default(now())

  eppId          Int
  epp            EPP              @relation(fields: [eppId], references: [id])
  userId         Int
  user           User             @relation(fields: [userId], references: [id])
  approvals      Approval[]       
}

/// Aprobaciones sobre solicitudes
model Approval {
  id             Int             @id @default(autoincrement())
  result         ApprovalResult
  comment        String?
  createdAt      DateTime        @default(now())

  requestId      Int
  request        Request         @relation(fields: [requestId], references: [id])
  userId         Int
  user           User            @relation(fields: [userId], references: [id])
}

/// Colaboradores (no usuarios de Clerk, solo para selección en formularios)
model Collaborator {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(128)
  email      String?  @db.VarChar(128)
  position   String?  @db.VarChar(64)
  location   String?  @db.VarChar(128)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  DeliveryBatches DeliveryBatch[]  // relación inversa
  @@index([name])
}
