// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Usar conexión directa (sin pooler) para migraciones/CLI.
  // En Vercel, define DIRECT_DATABASE_URL con el host directo de Neon (sin "-pooler").
  directUrl = env("DIRECT_DATABASE_URL")
}

/// Enumeraciones
enum StockMovementType {
  ENTRY
  EXIT
  TRANSFER_IN
  TRANSFER_OUT
  ADJUSTMENT
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum DeliveryCondition {
  REUSABLE
  DISCARDED
}

enum ApprovalResult {
  APPROVED
  REJECTED
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
}

enum UserRole {
  ADMIN
  SUPERVISOR
  WAREHOUSE_MANAGER
  OPERATOR
  VIEWER
}

/// Usuarios con Auth.js
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  password      String // Hash de la contraseña
  image         String?
  role          UserRole  @default(VIEWER)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?

  // Auth.js relations
  accounts Account[]
  sessions Session[]

  // App relations
  stockMovements  StockMovement[]  @relation("UserStockMovements")
  deliveryBatches DeliveryBatch[]  @relation("UserDeliveryBatches")
  returnBatches   ReturnBatch[]    @relation("UserReturnBatches")
  requests        Request[]        @relation("UserRequests")
  approvals       Approval[]       @relation("UserApprovals")
  auditLogs       AuditLog[]       @relation("UserAuditLogs")
  permissions     UserPermission[]

  @@index([email])
  @@index([role])
}

/// Auth.js Account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

/// Auth.js Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

/// Auth.js Verification Token model
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// Sistema de permisos granulares
model Permission {
  id          String   @id @default(cuid())
  name        String   @unique // Ej: "create:delivery", "delete:epp"
  description String?
  module      String // Ej: "deliveries", "stock", "users"
  createdAt   DateTime @default(now())

  users UserPermission[]

  @@index([module])
}

/// Relación Usuario-Permisos
model UserPermission {
  id           String   @id @default(cuid())
  userId       String
  permissionId String
  grantedAt    DateTime @default(now())
  grantedBy    String? // ID del usuario que otorgó el permiso

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([userId, permissionId])
  @@index([userId])
  @@index([permissionId])
}

/// Artículos de protección personal
model EPP {
  id           Int      @id @default(autoincrement())
  code         String   @unique @db.VarChar(32)
  name         String   @db.VarChar(128)
  category     String   @db.VarChar(64)
  description  String?
  imageUrl     String?
  datasheetUrl String?
  minStock     Int      @default(1)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  stocks      EPPStock[]
  movements   StockMovement[]
  deliveries  Delivery[]
  returnItems ReturnItem[]
  requests    Request[]

  @@index([name])
  @@index([category])
}

/// Almacenes físicos
model Warehouse {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  location  String?
  createdAt DateTime @default(now())

  stocks          EPPStock[]
  movements       StockMovement[]
  deliveryBatches DeliveryBatch[]
  returnBatches   ReturnBatch[]

  @@index([name])
}

/// Inventario por almacén
model EPPStock {
  eppId       Int
  warehouseId Int
  quantity    Int @default(0)

  epp       EPP       @relation(fields: [eppId], references: [id])
  warehouse Warehouse @relation(fields: [warehouseId], references: [id])

  @@id([eppId, warehouseId])
}

/// Movimientos de stock
model StockMovement {
  id        Int               @id @default(autoincrement())
  type      StockMovementType
  quantity  Int
  note      String?
  createdAt DateTime          @default(now())

  eppId Int
  epp   EPP @relation(fields: [eppId], references: [id])

  warehouseId Int
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])

  userId String
  user   User   @relation("UserStockMovements", fields: [userId], references: [id])

  @@index([eppId, warehouseId, createdAt])
  @@index([type, createdAt])
  @@index([userId, createdAt])
}

/// Lote de entregas
model DeliveryBatch {
  id             Int          @id @default(autoincrement())
  code           String       @unique @db.VarChar(32)
  collaboratorId Int
  collaborator   Collaborator @relation(fields: [collaboratorId], references: [id])
  note           String?
  warehouseId    Int
  warehouse      Warehouse    @relation(fields: [warehouseId], references: [id])
  userId         String
  user           User         @relation("UserDeliveryBatches", fields: [userId], references: [id])
  createdAt      DateTime     @default(now())

  deliveries Delivery[]

  @@index([createdAt])
  @@index([collaboratorId])
  @@index([warehouseId])
}

/// Cada línea de entrega
model Delivery {
  id        Int           @id @default(autoincrement())
  batchId   Int
  batch     DeliveryBatch @relation(fields: [batchId], references: [id])
  eppId     Int
  epp       EPP           @relation(fields: [eppId], references: [id])
  quantity  Int
  createdAt DateTime      @default(now())

  @@index([batchId, eppId])
  @@index([createdAt])
}

/// Lote de devoluciones
model ReturnBatch {
  id          Int       @id @default(autoincrement())
  code        String    @unique @db.VarChar(32)
  warehouseId Int
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  userId      String
  user        User      @relation("UserReturnBatches", fields: [userId], references: [id])
  note        String?
  createdAt   DateTime  @default(now())

  items ReturnItem[]

  @@index([createdAt])
}

/// Cada línea de devolución
model ReturnItem {
  id        Int               @id @default(autoincrement())
  batchId   Int
  batch     ReturnBatch       @relation(fields: [batchId], references: [id])
  eppId     Int
  epp       EPP               @relation(fields: [eppId], references: [id])
  quantity  Int
  condition DeliveryCondition
  createdAt DateTime          @default(now())

  @@index([batchId, eppId])
  @@index([createdAt])
}

/// Solicitudes de EPP
model Request {
  id        Int           @id @default(autoincrement())
  employee  String
  quantity  Int
  reason    String?
  status    RequestStatus @default(PENDING)
  createdAt DateTime      @default(now())

  eppId     Int
  epp       EPP        @relation(fields: [eppId], references: [id])
  userId    String
  user      User       @relation("UserRequests", fields: [userId], references: [id])
  approvals Approval[]
}

/// Aprobaciones
model Approval {
  id        Int            @id @default(autoincrement())
  result    ApprovalResult
  comment   String?
  createdAt DateTime       @default(now())

  requestId Int
  request   Request @relation(fields: [requestId], references: [id])
  userId    String
  user      User    @relation("UserApprovals", fields: [userId], references: [id])
}

/// Colaboradores de entregas
model Collaborator {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(128)
  email     String?  @db.VarChar(128)
  position  String?  @db.VarChar(64)
  location  String?  @db.VarChar(128)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deliveryBatches DeliveryBatch[]

  @@index([name])
  @@index([location])
}

/// Configuración general del sistema (solo un registro – id = 1)
model SystemConfig {
  id          Int      @id @default(1)
  companyName String?  @db.VarChar(128)
  logoUrl     String?  @db.VarChar(255) // Ruta relativa dentro de /public
  updatedAt   DateTime @updatedAt
}

/// Sistema de Auditoría - Trazabilidad completa de cambios
model AuditLog {
  id         BigInt      @id @default(autoincrement())
  userId     String
  action     AuditAction
  entityType String      @db.VarChar(50) // DeliveryBatch, EPP, Stock, etc.
  entityId   Int
  changes    String?     @db.Text // JSON con solo los cambios (optimizado)
  metadata   Json? // IP, userAgent, location, etc.
  createdAt  DateTime    @default(now())
  expiresAt  DateTime // Auto-calculado según tipo de entidad

  user User @relation("UserAuditLogs", fields: [userId], references: [id], onDelete: Cascade)

  @@index([entityType, entityId, createdAt(sort: Desc)])
  @@index([userId, createdAt(sort: Desc)])
  @@index([expiresAt])
  @@index([createdAt(sort: Desc)])
  @@map("AuditLog")
}
